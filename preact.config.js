import { resolve } from 'path';
import webpack from 'webpack';

export default {
  /**
   * Function that mutates the original webpack config.
   * Supports asynchronous changes when a promise is returned (or it's an async function).
   *
   * @param {object} config - original webpack config.
   * @param {object} env - options passed to the CLI.
   * @param {WebpackConfigHelpers} helpers - object with useful helpers for working with the webpack config.
   * @param {object} options - this is mainly relevant for plugins (will always be empty in the config), default to an empty object
   **/
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  webpack(config, env, helpers, options) {
    // Override localIdentName, default is "[local]__[hash:base64:5]"
    if (config.mode === 'production') {
      config.module.rules[4].use[1].options.modules = {
        localIdentName: '[name]_[local]__[hash:base64:5]',
      };
    } else {
      config.module.rules[4].use[1].options.modules = {
        localIdentName: '[name]_[local]',
      };
    }

    // Replace default loader with a modern one.
    // config.module.rules[4].use.splice(1, 0, {
    //   loader: '@teamsupercell/typings-for-css-modules-loader',
    //   options: {
    //     banner:
    //       '// This file is automatically generated from your CSS. Any edits will be overwritten.',
    //     disableLocalsExport: true,
    //   },
    // });
    config.module.rules[4].use.splice(1, 0, 'css-modules-typescript-loader');

    // Ignore CSS TS definitions
    config.plugins.push(new webpack.WatchIgnorePlugin([/css\.d\.ts$/]));

    // Use any `index` file, not just index.js
    config.resolve.alias['preact-cli-entrypoint'] = resolve(process.cwd(), 'src', 'index');
  },
};
